package com.mycompany.myapp.domain;

import static com.mycompany.myapp.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class SummaryAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSummaryAllPropertiesEquals(Summary expected, Summary actual) {
        assertSummaryAutoGeneratedPropertiesEquals(expected, actual);
        assertSummaryAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSummaryAllUpdatablePropertiesEquals(Summary expected, Summary actual) {
        assertSummaryUpdatableFieldsEquals(expected, actual);
        assertSummaryUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSummaryAutoGeneratedPropertiesEquals(Summary expected, Summary actual) {
        assertThat(actual)
            .as("Verify Summary auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSummaryUpdatableFieldsEquals(Summary expected, Summary actual) {
        assertThat(actual)
            .as("Verify Summary relevant properties")
            .satisfies(a -> assertThat(a.getPeriodType()).as("check periodType").isEqualTo(expected.getPeriodType()))
            .satisfies(a -> assertThat(a.getPeriodValue()).as("check periodValue").isEqualTo(expected.getPeriodValue()))
            .satisfies(a ->
                assertThat(a.getTotalAssets())
                    .as("check totalAssets")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getTotalAssets())
            )
            .satisfies(a ->
                assertThat(a.getTotalIncome())
                    .as("check totalIncome")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getTotalIncome())
            )
            .satisfies(a ->
                assertThat(a.getTotalExpense())
                    .as("check totalExpense")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getTotalExpense())
            )
            .satisfies(a ->
                assertThat(a.getTotalProfit())
                    .as("check totalProfit")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getTotalProfit())
            )
            .satisfies(a ->
                assertThat(a.getProfitPercentage())
                    .as("check profitPercentage")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getProfitPercentage())
            )
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSummaryUpdatableRelationshipsEquals(Summary expected, Summary actual) {
        // empty method
    }
}
